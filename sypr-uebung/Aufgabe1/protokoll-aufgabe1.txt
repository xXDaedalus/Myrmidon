kevin@DESKTOP-P1ERQC0:/mnt/c/Users/Kevin/z-htwg/2. Semester/sypr-uebungen/Aufgabe1$ make clean
rm -f aufgabe1 aufgabe1.o
kevin@DESKTOP-P1ERQC0:/mnt/c/Users/Kevin/z-htwg/2. Semester/sypr-uebungen/Aufgabe1$ gcc -g -fno-stack-protector -c aufgabe1.c
kevin@DESKTOP-P1ERQC0:/mnt/c/Users/Kevin/z-htwg/2. Semester/sypr-uebungen/Aufgabe1$ gcc aufgabe1.o -o aufgabe1
kevin@DESKTOP-P1ERQC0:/mnt/c/Users/Kevin/z-htwg/2. Semester/sypr-uebungen/Aufgabe1$ make clean
rm -f aufgabe1 aufgabe1.o
kevin@DESKTOP-P1ERQC0:/mnt/c/Users/Kevin/z-htwg/2. Semester/sypr-uebungen/Aufgabe1$ make
gcc -g -fno-stack-protector -Wwrite-strings -Wall -Wextra -Werror -std=c11 -pedantic    aufgabe1.c   -o aufgabe1
kevin@DESKTOP-P1ERQC0:/mnt/c/Users/Kevin/z-htwg/2. Semester/sypr-uebungen/Aufgabe1$ ./aufgabe1
Adresse         | Platzbedarf   | Typ                   | Name          | Wert
0x7fffad4a70cc  | 4             | int                   | i             | 42
0x7fffad4a70c0  | 8             | long                  | l             | 1234567890
0x7fffad4a70bf  | 1             | char                  | c             | A
0x7fffad4a70b8  | 4             | float                 | f             | 3.14
0x7fffad4a70b0  | 8             | double                | d             | 2.71828
0x7fffad4a70ae  | 2             | short                 | sh            | 32767
0x7fffad4a70a0  | 8             | long long             | ll            | 9223372036854775807
0x7fffad4a709c  | 4             | signed int            | si            | -2147483648
0x7fffad4a7090  | 8             | signed long           | sl            | -2147483648
0x7fffad4a708f  | 1             | signed char           | sc            | -128
0x7fffad4a708c  | 2             | signed short          | ss            | -32768
0x7fffad4a708b  | 1             | unsigned char         | uc            | 255
0x7fffad4a7088  | 2             | unsigned short        | us            | 65535
0x7fffad4a7084  | 4             | unsigned int          | ui            | 65535
0x7fffad4a7078  | 8             | unsigned long         | ul            | 4294967295
0x7fffad4a7070  | 8             | unsigned long long    | ull           | 18446744073709551615
0x7fffad4a7068  | 8             | char*                 | s             | Hallo

 Das Programm arbeitet mit dem C-Datenmodell LP64.
kevin@DESKTOP-P1ERQC0:/mnt/c/Users/Kevin/z-htwg/2. Semester/sypr-uebungen/Aufgabe1$ make cppcheck
cppcheck --enable=warning,style --std=c11 aufgabe1.c
Checking aufgabe1.c ...
Checking aufgabe1.c: __ILP32__...
Checking aufgabe1.c: __LLP64__...
Checking aufgabe1.c: __LP64__...
kevin@DESKTOP-P1ERQC0:/mnt/c/Users/Kevin/z-htwg/2. Semester/sypr-uebungen/Aufgabe1$



Sind die Variablen in der Reihenfolge ihrer Definition im Hauptspeicher abgelegt?

In C gibt es keine Garantie dafür, dass Variablen im Speicher in der gleichen Reihenfolge abgelegt werden, wie sie im Quellcode definiert sind. Die Anordnung im Speicher hängt von verschiedenen Faktoren ab, einschließlich des Compilers, der Optimierungseinstellungen, der Zielplattform und möglicherweise anderer Faktoren.


Liegen die Variablen direkt hintereinander oder gibt es Lücken?

- l-i:    0x7ffc237338e0 − 0x7ffc237338ec  = −40x7ffc237338e0  − 0x7ffc237338ec  = −4
  (in Dezimal: -4)
- c-l:    0x7ffc237338df − 0x7ffc237338e0  = −10x7ffc237338df  − 0x7ffc237338e0  = −1
  (in Dezimal: -1)
- f-c:    0x7ffc237338d8 − 0x7ffc237338df  = −70x7ffc237338d8  − 0x7ffc237338df  = −7
  (in Dezimal: -7)
- d-f:    0x7ffc237338d0 − 0x7ffc237338d8  = −80x7ffc237338d0  − 0x7ffc237338d8  = −8
  (in Dezimal: -8)
- sh-d:   0x7ffc237338ce − 0x7ffc237338d0  = −20x7ffc237338ce  − 0x7ffc237338d0  = −2
  (in Dezimal: -2)
- ui-sh:  0x7ffc237338c8 − 0x7ffc237338ce  = −60x7ffc237338c8  − 0x7ffc237338ce  = −6
  (in Dezimal: -6)
- ul-ui:  0x7ffc237338c0 − 0x7ffc237338c8  = −80x7ffc237338c0  − 0x7ffc237338c8  = −8
  (in Dezimal: -8)
- sc-ul:  0x7ffc237338bf − 0x7ffc237338c0  = −10x7ffc237338bf  − 0x7ffc237338c0  = −1
  (in Dezimal: -1)
- uc-sc:  0x7ffc237338be − 0x7ffc237338bf  = −10x7ffc237338be  − 0x7ffc237338bf  = −1
  (in Dezimal: -1)
- ll-uc:  0x7ffc237338b0 − 0x7ffc237338be  = −160x7ffc237338b0 − 0x7ffc237338be  = −16
  (in Dezimal: -16)
- us-ll:  0x7ffc237338ae − 0x7ffc237338b0  = −20x7ffc237338ae  − 0x7ffc237338b0  = −2
  (in Dezimal: -2)
- ss-us:  0x7ffc237338ac − 0x7ffc237338ae  = −20x7ffc237338ac  − 0x7ffc237338ae  = −2
  (in Dezimal: -2)
- ull-ss: 0x7ffc237338a0 − 0x7ffc237338ac  = −120x7ffc237338a0 − 0x7ffc237338ac  = −12
  (in Dezimal: -12)
- si-ull: 0x7ffc2373389c − 0x7ffc237338a0  = −40x7ffc2373389c  − 0x7ffc237338a0  = −4
  (in Dezimal: -4)
- sl-si:  0x7ffc23733890 − 0x7ffc2373389c  = −120x7ffc23733890 − 0x7ffc2373389c  = −12
  (in Dezimal: -12)
- s-sl:   0x7ffc23733888 − 0x7ffc23733890  = −80x7ffc23733888  − 0x7ffc23733890  = −8
  (in Dezimal: -8)

Es gibt lücken.

Falls es Lücken gibt, wo liegen sie?
-Lücke von 4  Bytes zwischen l   und i
-Lücke von 1  Byte  zwischen c   und l
-Lücke von 7  Bytes zwischen f   und c
-Lücke von 8  Bytes zwischen d   und f
-Lücke von 2  Bytes zwischen sh  und d
-Lücke von 6  Bytes zwischen ui  und sh
-Lücke von 8  Bytes zwischen ul  und ui
-Lücke von 1  Byte  zwischen sc  und ul
-Lücke von 1  Byte  zwischen uc  und sc
-Lücke von 16 Bytes zwischen ll  und uc
-Lücke von 2  Bytes zwischen us  und ll
-Lücke von 2  Bytes zwischen ss  und us
-Lücke von 12 Bytes zwischen ull und ss
-Lücke von 4  Bytes zwischen si  und ull
-Lücke von 12 Bytes zwischen sl  und si
-Lücke von 8  Bytes zwischen s   und sl

Können Sie sich erklären, warum es eventuell Lücken gibt?

-Speicherausrichtung: Viele Computerarchitekturen erfordern, dass bestimmte Datentypen
 an bestimmten Adressen im Speicher platziert werden, um effiziente Speicherzugriffe zu ermöglichen.
-Compiler-Optimierungen: Compiler versuchen oft, den Speicher effizient zu nutzen,
 indem sie Variablen anordnen und ausrichten, um die Zugriffszeiten zu optimieren und den Speicherplatz zu minimieren.
-Variablenanordnung im Quellcode: Die Reihenfolge, in der Variablen im Quellcode definiert sind,
 entspricht möglicherweise nicht der Reihenfolge, in der sie im Speicher platziert werden. 
 Der Compiler ist frei, Variablen so anzuordnen, wie es für die effiziente Speichernutzung am besten ist


Wie viel Speicher belegen die Variablen insgesamt, also inklusive eventueller Lücken?

104 = gößte - kleinste adresse + plazbedarf größte adresse


